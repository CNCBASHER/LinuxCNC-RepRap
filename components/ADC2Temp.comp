/******************************************************************************
 *
 * Copyright (C) 2012 Charles Steinkuehler (charles AT steinkuehler DOT net
 *
 *
 * This module implements a conversion between ADC values representing
 * thermistor based temperature readings and the measured temperature
 *
 ******************************************************************************
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General
 * Public License as published by the Free Software Foundation.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111 USA
 *
 * THE AUTHORS OF THIS LIBRARY ACCEPT ABSOLUTELY NO LIABILITY FOR
 * ANY HARM OR LOSS RESULTING FROM ITS USE.  IT IS _EXTREMELY_ UNWISE
 * TO RELY ON SOFTWARE ALONE FOR SAFETY.  Any machinery capable of
 * harming persons must have provisions for completely removing power
 * from all motors, etc, before persons enter any danger area.  All
 * machinery must be designed to comply with local and national safety
 * codes, and the authors of this software can not, and do not, take
 * any responsibility for such compliance.
 *
 * This code was written as part of the LinucCNC HAL project.  For more
 * information, go to www.linuxcnc.org.
 *
 ******************************************************************************/

component ADC2Temp "ADC value to Temperature Converter";

description """Converts analog thermistor reading from ADC to temperature, currently assumes a 10-bit ADC and Epcos B57560G1104 thermistor.""";

pin in  unsigned ADCIn    "ADC input value";
pin in  bit      NewValue "Toggles to indicate a new sample";
pin out float    TempOut  "Temperature output";

function _ ;
license "GPLv2 or greater";
author "Charles Steinkuehler";

variable int NewValueQ = 0;
;;


#include "hal/components/thermistors.h"

float TempSlope(int i)
{
    return (TempTable[i].temp - TempTable[i-1].temp) / (TempTable[i].adc - TempTable[i-1].adc);

}

FUNCTION(_)
{
    if (NewValue != NewValueQ){
        NewValueQ = NewValue;

        int i;

        // Calculate new output value
        for (i=1 ; i < TempTableLen ; i++)
        {
            if (TempTable[i].adc > (float)ADCIn) {
                TempOut = TempTable[i-1].temp + (((float)ADCIn - TempTable[i-1].adc) * TempSlope(i));
                break;
            }
        }
    }
}


